<?php
echo '
<h1>МАССИВЫ</h1>

<h2>МАССИВЫ</h2>
<p>
<b>Массив</b> – это несколько значений, хранящихся, как одно целое. 
<br>
Массивы состоят из <u>Элементов массива</u>.
<br>
Каждый <u>Элемент массива</u> состоит из <u>Индекса массива</u> и <u>Значения массива</u>.
<br>
<b>Индекс массива</b> - по нему можно обратиться к элементу. Он проставляется автоматически (в виде числа), также можно задать его в ручную в виде числа или текстового значения. 
<br>
<b>Значение массива</b> - может быть что угодно (даже массив или объект).
<br><br>

Для задания массива используются квадратные скобки
<br>
(Иногда можно встретить старый синтаксис, примерно так: array(1, 2, 3). Не используйте его!)
<br>
<textarea cols="100">
$ages = [42, 45, 33, 18];
</textarea>
<br><br>

Массив в PHP может содержать в себе любое количество элементов любого типа:
<br>
<textarea cols="100">
$foo = [1, 13, \'bar\', \'baz\', 42]
</textarea>
<br><br>

В массив можно в любой момент добавить еще один элемент:
<br>
<textarea cols="100">
$foo = [1, 2, 3];
$foo[] = 5;
</textarea>
<br><br>

Для быстрого просмотра массива существует конструкция var_dump (вы уже знаете о ней):
<br>
<textarea cols="100">
$foo = [1, 2, 3];
var_dump($foo);
</textarea>
<br><br>
</p>

<h2>ИНДЕКСЫ МАССИВОВ</h2>
<p>
Все элементы массива, даже если это явно не указано, имеют "номер", который
называется "индекс".
<br>
Если индекс не указан, счет идет от 0.
<br>
К любому элементу можно обратиться по его индексу:
<br>
<textarea cols="100" rows="4">
$arr = [1, 2, 3];
echo $arr[0]; // 1
$arr[1] = 42;
var_dump($arr); // 1, 42, 3
</textarea>
<br><br>

Индекс можно указать явно:
<br>
<textarea cols="100">
$arr = [1 => \'январь\', 2 => \'февраль\']
</textarea>
<br><br>

Индекс может быть и числовым и строковым:
<br>
<textarea cols="100" rows="4">
$arr = [
    \'jan\' => \'январь\', \'feb\' => \'февраль\'
];
echo $arr[\'jan\']; // январь
</textarea>
<br><br>
</p>

<h2>МНОГОМЕРНЫЕ МАССИВЫ</h2>
<p>
Массив в качестве одного из своих элементов может иметь другой массив. Это так называемые многомерные массивы:
<br>
<textarea cols="100" rows="3">
$arr = [];
$arr[1] = [10, 20, 30];
$arr[2] = [100, 200, 300];
</textarea>
<br><br>

Вложенность массивов друг в друга неограничена
<br><br>

Для обращения к элементам многомерного массива используются несколько квадратных скобок:
<br>
<textarea cols="100" rows="2">
$arr[1]; // это массив [10, 20, 30]
$arr[1][0]; // это число 10
</textarea>
<br><br>

Индексы также могут быть и числовым и строковым:
<br>
<textarea cols="100" rows="1">
echo $arr[\'jan\'][1]; // понедельник
</textarea>
<br><br>
</p>

<hr>

<h1>РАБОТА С МАССИВАМИ</h1>
<h2>ЦИКЛ foreach</h2>
<p>
Специальная конструкция языка, позволяющая пройтись по всем элементам массива:
<br>
<textarea cols="100" rows="5">
$arr = [1, 2, 3];

foreach ($arr as $value) {
    echo $value;
}
</textarea>
<br><br>

Переменная <b>$value</b> на каждом шаге цикла получает значение следующего элемента массива.
<br>
Цикл закончится тогда, когда закончится обход всех элементов.
<br><br>

Можно сразу получать и индексы, в еще одну переменную:
<br>
<textarea cols="100" rows="3">
foreach ($arr as $index => $value) {
    ...
}
</textarea>
<br><br>
</p>

<h2>ФУНКЦИИ для работы с массивами</h2>
<p>
Возвращает булево значение, ответ на вопрос "есть ли в массиве такой элемент?"
<br>
<textarea cols="100" rows="1">
$res = in_array($el, $arr);
</textarea>
<br><br>

Слияние двух массивов в один, операция "объединение"
<br>
<textarea cols="100" rows="1">
$res = array_merge($a1, $a2);
</textarea>
<br><br>

Возвращает совпадающие элементы в массивах, операция "пересечение"
<br>
<textarea cols="100" rows="1">
$res = array_intersect($a1, $a2);
</textarea>
<br><br>

Превращает массив в строку, перечисляя его элементы через заданный разделитель
<br>
<textarea cols="100" rows="1">
$res = implode(\',\', $arr);
</textarea>
<br><br>

Превращает строку в массив, разбивая ее по заданному разделителю
<br>
<textarea cols="100" rows="1">
$res = explode(\',\', $str);
</textarea>
<br><br>
</p>

<hr>

<h1>ВЗАИМОДЕЙСТВИЕ С ПОЛЬЗОВАТЕЛЕМ</h1>
<h2>Метод GET протокола HTTP</h2>
<p>
Это <b>самый простой</b> метод для передачи данных от клиента на сервер. Его суть очень проста:
<br><br>
К ссылке (любой) можно прикрепить параметры и их значения:
<br>
<textarea cols="100" rows="1">
<a href="/news.php?id=12">...</a>
</textarea>
<br><br>

В данном случае имя параметра <b>"id"</b>, а значение <b>"12"</b>.
<br>
В PHP вам сразу доступны эти параметры через <b>суперглобальный массив</b> $_GET.
<br>
<textarea cols="100" rows="1">
echo $_GET[\'id\']; // 12!
</textarea>
<br><br>
Массив $_GET называется "суперглобальным" потому что доступен всегда и в любом месте вашей программы
<br><br>
Передать можно и несколько параметров сразу, разделяя их знаком "&":
<br>
<textarea cols="100" rows="1">
/news.php?topic=12&from=2016-01-01
</textarea>
<br><br>
</p>

<h2>Метод POST протокола HTTP</h2>
<p>
Это специальный метод для передачи данных от клиента на сервер.
<br><br>
В отличие от GET данные идут "невидимо" для пользователя и не отображаются в адресной строке (однако, можно посмотреть в отладчике):
<br><br>
Самое частое применение, это передача данных из формы:
<br>
<textarea cols="100" rows="4">
<form action="foo.php" method="post">
    <input type="text" name="bar">
    <input type="submit">
</form>
</textarea>
<br><br>

В этом случае в PHP данные будут доступны в массиве $_POST:
<br>
<textarea cols="100" rows="1">
echo $_POST[\'bar\'];
</textarea>
<br><br>
</p>

<h2>Суперглобальный массив $_ POST</h2>
<p>
Доступен всегда, в любом месте вашей программы.
<br><br>
Содержит в себе данные, переданные в текущем запросе от пользователя на сервер.
<br><br>
Индексы массива – совпадают с названиями полей формы.
<br><br>
Интересные особенности:
<br><br>
Точки в именах полей преобразуются в подчеркивания в индексах массива $_POST;
<br><br>
Можно передавать массивы, вот пример:
<br><br>
HTML:
<br>
<textarea cols="100" rows="2">
<input type="text" name="foo[1]">
<input type="text" name="foo[2]">
</textarea>
<br><br>
PHP:
<br>
<textarea cols="100" rows="1">
echo $_POST[\'foo\'][1];
</textarea>
<br><br>



</p>











';

?>