<?php
echo '
<h1>УРОК 1. БЫСТРЫЙ СТАРТ.</h1>

<h2>НАСТРАИВАЕМ СЕРВЕР</h2>
<p>
Установим локальный Web-сервер (для эмуляции работы с Web-сервера).
<br>
Для Windows рекомендуют <a href="https://ospanel.io/download/">OpenServer</a>.
</p>


<h3>1. Скачать OpenServer:</h3>
<p>
- Официальный сайт: https://ospanel.io/download/
<br>
- Рекомендуемая версия "Premium" (должно хватить за глаза)
<br>
- Последняя версия на (02.08.2017): OSPanel Premium 5.2.7 
</p>


<h3>2. Установить OpenServer:</h3>
<p>
2.1. Очистить port 80 и 8080 на ПК:
<br><br>
2.1.1. Настроить Skype, чтобы он не занимал порт 80 и 8080:
<br>
"Инструменты", "Настройки", "Дополнительно", "Соединение", Снять галки c использовать порты 80 и 443
<br><br>
2.1.2. Бывает в Windows - порт 80 и 8080 занят службой IIS (веб-сервер MS)
<br>
Нужно отключить службу IIS
<br><br>
2.1.3. Бывает в Windows - порт 80 и 8080 занят системной службой (типо svhost)
<br>
Бывает и такое, нужно поискать статью в инете. К меня починилось изменением какогото параметра в реестре. 
<br><br>

2.2. Установить OpenServer:
<br>
- Указать при установке название папки куда ставить "C:\WEB_SERVER"
</p>


<h3>3. Настроить OpenServer:</h3>
<p>
3.1. Зайти в "Настройки" OpenServer:
<br>
- Запустить OpenServer, далее в "Панеле задач" ПКМ по значку OpenServer, "Настройки"
<br><br>
3.1. Вкладка "Домены":
<br>
- Управление доменами - ставим "Автопоиск доменов"
<br>
- Автопоиск корневой папки - ставим самый длинный вариант
<br><br>
3.2. Вкладка "Модули": 
<br>
- HTTP - ставим Apache-PHP-7 (выбираем Apache последней доступной версии (для PHP7 версия более 2.4))
<br>
- PHP - ставим PHP-7.1 (выбираем PHP последней доступной версии)
<br>
- MySQL / MariaDB - ставим MySQL-5.7 (выбираем MySQL последней доступной версии)
<br><br>
3.3. Вкладка "Основные": 
<br>
- Поставить галку "Запускать вместе с Windows"
<br><br>
3.4. Жмем "Сохранить": 
<br><br>
3.5. Запускаем WebServer в OpenServer: 
<br>
- В "Панеле задач" ПКМ по значку OpenServer, жмем "Запустить"
<br>
(Если значек OpenServer в "Панеле задач" стал зеленым, значит все хорошо)
</p>


<h3>4. Создадим директорию сайта (проекта):</h3>
<p>
4.1. Перейдем в директорию где хранятся папки доменов:
<br>
"C:\WEB_SERVER\OpenServer\domains"
<br><br>
4.2. Создадим папку для нашего домена:
<br>
"C:\WEB_SERVER\OpenServer\domains\site.ru"
<br><br>
4.3. Перезапустим OpenServer:
<br>
(OpenServer автоматически пропишит нужные настройки, к корню этой папки будет доступ из вне)
<br>
Теперь можно положить файл "index.php" в корень "site.ru" и проверить работу WebServer-а в Браузере.
<br>
Можно использовать OpenServer, как реальный WebServer.
</p>

<hr>


<h2>ГДЕ И КАК РАБОТАЕТ PHP?</h2>
<p>
PHP – это язык программирования. Не разметки, как HTML и не стилей, как CSS, а "настоящего" программирования.
<br><br>
PHP – предназначен для создания бизнеслогики нашего веб-приложения
<br><br>
PHP работает на сервере!
<br>
<img src="lesson-1-01.png" />
<br>
РЕЗУЛЬТАТ РАБОТЫ ПРОГРАММЫ НА PHP – ЭТО ТЕКСТ, который передается клиенту в ответ на его запрос.
<br><br>
Программа на PHP запускается каждый раз в ответ на запрос пользователя.
</p>

<hr>


<h2>ПЕРВАЯ ПРОГРАММА</h2>
<p>
Файл должен иметь расширение ".php", иначе чуда не произойдет!
<br><br>
Внутри такого файла можно сделать содержимое, как будто это страница HTML, а в нужных местах вставить блоки с результатами PHP.
<br><br>
Для вставки PHP блока - нужно вставить PHP код в теги
<br>
<textarea cols="100" rows="2">
<?php
?>
</textarea>

<br><br>
ВЫВОД или как увидеть работу программы?
<br>
Любое выражение можно вывести с помощью конструкции echo.
<br><br>
При этом вы должны понимать, что вывод будет встроен в страницу, которая, после полной готовности, будет отправлена клиенту:
<br><br>
<textarea cols="100" rows="10">
<html>
    <body>
        <p>
            Результат подсчета:
            <?php
                echo 2 * 2;
            ?>
        </p>
    </body>
</html>
</textarea>
</p>

<hr>


<h2>ВЫРАЖЕНИЯ</h2>
<p>
Выражение – это некое значение (число, строка и т.д.), заданное в явном виде, или в виде вычислений.
<br>
В PHP все является выражением!
<br><br>
Например:
<br>
<textarea cols="100" rows="5">
2 // это число
1.5 // это тоже число, но нецелое
\'foo\' // это строка из 3 символов
2+2 // это выражение, его результат =4
2*2 // не поверите, но тоже 4!
</textarea>
<br>
Выражение имеет значение (то, чему оно равно)
<br><br>
Так же выражение можно записать как:
<br><br>
<textarea cols="100" rows="3">
($a + 24)
($a = 24)  // 24
($a = 24) + 1  // 25
</textarea>
<br><br>
</p>
<hr>


<h2>ОПЕРАЦИИ И (ОПЕРПТОРЫ)</h2>
<p>
- Арифметические ( + - * / )
<br>
<textarea cols="100" rows="5">
// Возведение в степень
4 ** 4 // 64

// Можно записать число вида 1e2
// (1 умножить на 10 в степени 2, результат = 100)
1e2 // 100

// Пр. делени, где в ответе получается целое число
// (В PHP при делении, если в остатке должно получиться целое число, то будет целое число, в других языках будет какоето значение после запятой.)
8 / 4 // 2
</textarea>
<br>
<br>
- Деление с остатком
<br>
<textarea cols="100" rows="1">
4 % 3 // 1
</textarea>
<br>
- Логические ( && || ! )
<br>
- Сравнения ( == != < >)
<br>
- Строковые
<br>
- Битовые
<br>
- Работы с массивами, проверки типа и другие, специфичные для PHP
</p>

<hr>


<h2>ПЕРЕМЕННЫЕ</h2>
<p>
Переменная – это некое значение (выражение), сохраненное под понятным для нас именем.
<br>
(Операция когда переменной даем значение - называется присваиванием)
<br>
Например:
<br>
<textarea cols="100" rows="3">
$email = \'test@example.com\';
$age = 42;
$result = 2 + 2 * 2;
</textarea>
<br>
- Имя переменной в PHP начинается со знака "$". Обратите внимание, что $foo и $FOO – это разные переменные!
<br>
- В PHP объявление переменной (создание имени) и присваивание ей значения – это одна операция.
<br>
- В принципе возможно и просто объявление переменной, без всякого значения:
<br>
<textarea cols="100" rows="1">
$a;
</textarea>
<br>
но это слегка бессмысленно :) Говорят, что в этом случае переменная имеет значение null.
</p>

<hr>


<h2>ТИПЫ</h2>
<p>
ТИП – это определение того, может быть значением
<br><br>
В PHP тип имеют значения, а не переменные. Переменная – это просто имя для значения, чтобы его сохранить на будущее.
<br><br>
<b>Самое интересное, что тип выводится автоматически!</b>
<br><br>

-<b>int, integer</b>
<br>
Целые числа. Любые. Включая, конечно, ноль.
<br>
Замкнуты относительно сложения, вычитания, умножения – результат снова будет целым числом. А вот при делении – не факт!
<br><br>

-<b>float</b>
<br>
Тоже числа. Но не целые, а имеющие дробную часть. Иногда нулевую, но всё равно имеющие.
<br>
Являются приближенными. Легко получить, написав число с десятичной точкой, или используя операции, дающие нецелый результат (деление, как пример)
<br><br>

-<b>string</b>
<br>
Строки. То, что состоит из символов и записано в ковычки.
<br>
<span style="color: red">Пользуемся все время одинарными ковычками.!!!</span>
<br>
Строки в PHP - это последовательность (множество) байт.
<br>
В PHP строки:
<br>
<textarea cols="100" rows="9">
// Могут быть любой длины (хоть вся "Война и мир")
// Могут быть нулевой длины (пустые)
$str = \'\';
// Могут заключаться в одинарные или двойные кавычки. Это почти одно и тоже.
$str1 = \'test\';
$str2 = "test";
// но:
$foo = \'Hello\n\';
$bar = "Hello\n";
</textarea>
<br><br>
</p>



<h2>ОПРЕДЕЛЕНИЕ ТИПА ДАННЫХ В РУЧНУЮ и АВТОМАТИЧЕСКИ ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,</h2>
<p>
<b>Тип результата операции всегда определяется оператором!</b>
<br><br>
Например, арифметические операции всегда производят числа:
<br>
<textarea cols="100" rows="3">
$a = $x + $y; // всегда число!
$a = 2 + \'2\'; // 4
$a = \'2\' * \'2\'; // тоже 4
</textarea>
<br>
А оператор "точка" (сложение строк) всегда производит строки:
<br>
<textarea cols="100" rows="3">
$a = $x . $y; // всегда строка!
$a = 2 . 2; // \'22\'
$a = \'2\' . 2; // тоже \'22\'
</textarea>
<br>
Этот механизм называется "приведением типов". Тип значения приводится к наиболее подходящему, чтобы соответствовать типу оператора.
</p>

<hr>


<h2>ФУНКЦИЯ</h2>
<p>
ФУНКЦИЯ – это подпрограмма, которая принимает на вход параметры (аргументы) и возвращает результат
<br><br>
Одна из самых сильных сторон PHP – богатая стандартная библиотека функций Функции можно использовать везде, где только можно использовать выражение.
<br><br>
Для использования функции нужно написать ее имя, а затем, в круглых скобках, список аргументов через запятую. Список можно быть и пустым!
<br>
<textarea cols="100" rows="5">
echo strlen(\'Hello\'); // 5
$a = 2 + sqrt(2+2); // 4.0
$x = str_replace(\'e\', \'a\', \'Hello\');
// \'Hallo\'
\'My number is \' . rand();
</textarea>
<br>
N.B. Невозможно знать наизусть ВСЕ функции стандартной библиотеки. Но возможно научиться пользоваться мануалом!
</p>
';

?>