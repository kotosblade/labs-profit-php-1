<?php
echo '
<h1>УРОК 2. ФУНКЦИИ. ОПЕРАТОРЫ КОНТРОЛЯ. ВКЛЮЧЕНИЕ ФАЙЛОВ.</h1>

<h2>ТИП BOOLEAN</h2>
<p>
boolean (bool) – тип, имеющий всего два значения:
<br>
<b>true</b> – истина
<br>
<b>false</b> - ложь
<br>
-По числам - 0 -false, все остальное true.
<br>
-По строкам -  пустая строка или если в стоке \'0\' - false, в остальном true.
<br><br>
Например:
<br>
<textarea cols="100" rows="4">
$a = true;
$b = false;
$x = (2 == 2);
$y = ($x != $a);
</textarea>
<br><br>

Булевы значения играют огромную роль в PHP.
<br>
На них построены различные условия, многие функции принимают и возвращают булевы значения.
<br><br>

<b>Приведение к boolean:</b>
<br>
(bool)0 == false; (bool)\'\' == false
<br>
Ненулевое число, и непустая строка – это true
<br>
Исключение: (bool)\'0\' == false
<br><br>

<b>Обратно:</b>
<br>
(int)false == 0; (string)false == \'\';
<br>
(int)true == 1; (string)true == \'1\';
</p>

<hr>


<h2>ТИП BOOLEAN</h2>
<p>
Булевы операторы – операторы, которые работают с булевыми значениями:
</p>
<p>
&& – логическое "И":
</p>
<table border="1" width="300">
    <tr width="300">
        <td width="100">&&</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>
    <tr width="300">
        <td width="100">0</td>
        <td width="100">0</td>
        <td width="100">0</td>
    </tr>    
    <tr width="300">
        <td width="100">1</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>     
</table>

<p>
|| – логическое "ИЛИ":
</p>
<table border="1" width="300">
    <tr width="300">
        <td width="100">||</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>
    <tr width="300">
        <td width="100">0</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>    
    <tr width="300">
        <td width="100">1</td>
        <td width="100">1</td>
        <td width="100">1</td>
    </tr>     
</table>

<p>
XOR – логическое "ИСКЛЮЧАЮЩЕЕ ИЛИ":
</p>
<table border="1" width="300">
    <tr width="300">
        <td width="100">xor</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>
    <tr width="300">
        <td width="100">0</td>
        <td width="100">0</td>
        <td width="100">1</td>
    </tr>    
    <tr width="300">
        <td width="100">1</td>
        <td width="100">1</td>
        <td width="100">0</td>
    </tr>     
</table>
<br><br>
<hr>

<h2>УСЛОВИЯ</h2>
<p>
УСЛОВИЕ – это оператор PHP, определяющий, должен ли выполняться тот или иной код в зависимости от чего-либо
<br>
<span style="color: red">Важно! Всегда пишите фигурные скобки, даже если вам кажется, что это необязательно!</span>
<br><br>
</p>

<h3>IF, ELSEIF, ELSE</h3>
<p>
<textarea cols="100" rows="5">
if ($x > y) {
    $m = $x;
} else {
    $m = y;
}
</textarea>
<br><br>

Сокращенная форма:
<br>
<textarea cols="100" rows="3">
if ($stm) {
    ...
}
</textarea>
<br><br>

Форма с перебором условий:
<br>
<textarea cols="100" rows="7">
if ($stm1) {
    ...
} elseif ($stm2) {
    ...
} else {
    ...
}
</textarea>
<br><br>
</p>

<h3>SWITCH, CASE</h3>
<p>
break прерывает перебор условий, не забывайте писать этот оператор!
<br><br>
Секция default выполнится, если не совпало ни одно сравнение, ее может и не быть
<br><br>
Обратите внимание, что $stm и значения в case могут быть любыми – проверяется просто их равенство (нестрогое)
<br><br>
Несколько case могут быть записаны один за другим и отвечать за один и тот же случай
<br><br>
<textarea cols="100" rows="11">
switch ($stm) {
    case 1:
        run1();
        break;
    case 2:
        run2();
        break;
    default:
        run();
        break;
}
</textarea>
<br><br>
</p>
<hr>


<h2>ФУНКЦИИ</h2>
<p>
ФУНКЦИЯ – это подпрограмма, имеющая имя, набор входных значений (аргументов) и возвращаемое значение (необязательно)
<br>
(Функцию это часть программы - которая будет часто использоваться в дальнейшем.)
<br><br>
<textarea cols="100" rows="10">
function maxnum ($a, $b) {
    if ($a > $b) {
        return $a;
    } else {
        return $b;
    }
}

$m = maxnum(3, 5);
echo maxnum(-1, 1);
</textarea>
<br><br>
Имя функции должно быть уникальным и не совпадать с именем библиотечной функции
<br><br>
return – это оператор возврата значения из функции. Их может быть несколько или не быть вообще. Оператор прерывает выполнение функции!
<br><br>
Все переменные, объявленные в функции, будут локальными и перестанут существовать после выхода из нее
<br><br>
Глобальные переменные недоступны в функции
<br><br>
</p>
<hr>


<h2>ПОДКЛЮЧЕНИЕ ФАЙЛОВ</h2>
<p>
АРХИТЕКТУРНО ВЕРНО разделять свою программу на отдельные файлы.
<br>
В качестве первого шага к хорошей архитектуре можно собрать в один файл функции, а в другие файлы тот код, который их использует.
<br><br>
<textarea cols="100" rows="1">
include __DIR__ . \'/functions.php\';
</textarea>
<br><br>
__DIR__ – это «магическая» константа. Она всегда содержит в себе полный путь в ФС до папки с текущим файлом
<br><br>
include подключает файл, в случае его недоступности – выведет предупреждение, но продолжит работу программы
<br><br>
require подключает файл, но в случае его недоступности вызовет фатальную ошибку и завершит программу
<br><br>
include_once и require_once не будут подключать указанный файл, если он уже ранее был подключен
<br><br>
</p>
<hr>


<h2>ТЕСТЫ</h2>
<p>
МОДУЛЬНЫЙ ТЕСТ – это код, содержащий утверждения о том, как должны работать отдельные модули (части) вашей программы
<br>
В PHP принято использовать модульные тесты для того, чтобы доказать, что ваша программа работает верно, и для того, чтобы отслеживать возможные ошибки при изменении кода.
<br><br>
ЭТО НЕКИЕ утверждения, как будет работать наша программа.
<br>
Это наши ожидания от кода, записанные в виде самого кода.
<br><br>
Применяются:
<br>
-для проверки функций (описываем для проверки необычных результатов сложных функций).
<br>
-для регресного тестирования. (Пр. Много пишим, затем нужно в каком то месте чтото поменять, если у нас были тесты на протижении всего кода - то мы меняем что нужно в какойто части програмки, далее перепроверяем, если тесты проходят значит наверное ничего не поломали)
<br><br>
<textarea cols="100" rows="16">
function maxnumber ($a, $b) {
    ...
}

// Проверь утверждение, что результат функции maxnumber(), 
// при входящем значении (1, 1) - будет равен 1.
assert ( maxnumber(1, 1) == 1);

// Проверяем:
// -если утверждение отрабатывает правильно, то ничего не вылазит.
// -если утверждение не прпвильно - вылезит ошибка.

assert ( 1 == maxnumber(1, 1) );
assert ( 1 == maxnumber(-1, 1) );
assert ( 1 == maxnumber(1, -1) );
</textarea>
<br><br>
Старайтесь писать тесты до написания кода 
<br>
Используйте конструкцию assert, она встроена в язык
<br><br>
Для включения asserts тестов нужно:
<br>
- открыть файл "php.ini"
<br>
- указать в блоке [Assertion]:
<br>
zend.assertions = 1
<br>
assert.active = On
<br>
assert.exception = On
<br>
- на время разработки проекта - ставим показывать все ошибки:
error_reporting = E_ALL
<br>
display_errors = On
<br><br>
</p>
<hr>







';

?>